// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1alpha1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CollectorImageScannerClient is the client API for CollectorImageScanner service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CollectorImageScannerClient interface {
	CreateEventOccurrence(ctx context.Context, in *CreateEventOccurrenceRequest, opts ...grpc.CallOption) (*CreateEventOccurrenceResponse, error)
}

type collectorImageScannerClient struct {
	cc grpc.ClientConnInterface
}

func NewCollectorImageScannerClient(cc grpc.ClientConnInterface) CollectorImageScannerClient {
	return &collectorImageScannerClient{cc}
}

func (c *collectorImageScannerClient) CreateEventOccurrence(ctx context.Context, in *CreateEventOccurrenceRequest, opts ...grpc.CallOption) (*CreateEventOccurrenceResponse, error) {
	out := new(CreateEventOccurrenceResponse)
	err := c.cc.Invoke(ctx, "/collector_image_scanner.v1alpha1.collectorImageScanner/CreateEventOccurrence", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CollectorImageScannerServer is the server API for CollectorImageScanner service.
// All implementations should embed UnimplementedCollectorImageScannerServer
// for forward compatibility
type CollectorImageScannerServer interface {
	CreateEventOccurrence(context.Context, *CreateEventOccurrenceRequest) (*CreateEventOccurrenceResponse, error)
}

// UnimplementedCollectorImageScannerServer should be embedded to have forward compatible implementations.
type UnimplementedCollectorImageScannerServer struct {
}

func (UnimplementedCollectorImageScannerServer) CreateEventOccurrence(context.Context, *CreateEventOccurrenceRequest) (*CreateEventOccurrenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEventOccurrence not implemented")
}

// UnsafeCollectorImageScannerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CollectorImageScannerServer will
// result in compilation errors.
type UnsafeCollectorImageScannerServer interface {
	mustEmbedUnimplementedCollectorImageScannerServer()
}

func RegisterCollectorImageScannerServer(s grpc.ServiceRegistrar, srv CollectorImageScannerServer) {
	s.RegisterService(&CollectorImageScanner_ServiceDesc, srv)
}

func _CollectorImageScanner_CreateEventOccurrence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEventOccurrenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectorImageScannerServer).CreateEventOccurrence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/collector_image_scanner.v1alpha1.collectorImageScanner/CreateEventOccurrence",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectorImageScannerServer).CreateEventOccurrence(ctx, req.(*CreateEventOccurrenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CollectorImageScanner_ServiceDesc is the grpc.ServiceDesc for CollectorImageScanner service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CollectorImageScanner_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "collector_image_scanner.v1alpha1.collectorImageScanner",
	HandlerType: (*CollectorImageScannerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateEventOccurrence",
			Handler:    _CollectorImageScanner_CreateEventOccurrence_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/v1alpha1/new-collector-template.proto",
}
