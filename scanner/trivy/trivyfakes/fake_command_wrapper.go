// Code generated by counterfeiter. DO NOT EDIT.
package trivyfakes

import (
	"sync"

	"github.com/rode/collector-image-scanner/scanner/trivy"
)

type FakeCommandWrapper struct {
	ScanStub        func(string) (*trivy.ScanOutput, error)
	scanMutex       sync.RWMutex
	scanArgsForCall []struct {
		arg1 string
	}
	scanReturns struct {
		result1 *trivy.ScanOutput
		result2 error
	}
	scanReturnsOnCall map[int]struct {
		result1 *trivy.ScanOutput
		result2 error
	}
	VersionStub        func() (*trivy.Version, error)
	versionMutex       sync.RWMutex
	versionArgsForCall []struct {
	}
	versionReturns struct {
		result1 *trivy.Version
		result2 error
	}
	versionReturnsOnCall map[int]struct {
		result1 *trivy.Version
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCommandWrapper) Scan(arg1 string) (*trivy.ScanOutput, error) {
	fake.scanMutex.Lock()
	ret, specificReturn := fake.scanReturnsOnCall[len(fake.scanArgsForCall)]
	fake.scanArgsForCall = append(fake.scanArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.ScanStub
	fakeReturns := fake.scanReturns
	fake.recordInvocation("Scan", []interface{}{arg1})
	fake.scanMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCommandWrapper) ScanCallCount() int {
	fake.scanMutex.RLock()
	defer fake.scanMutex.RUnlock()
	return len(fake.scanArgsForCall)
}

func (fake *FakeCommandWrapper) ScanCalls(stub func(string) (*trivy.ScanOutput, error)) {
	fake.scanMutex.Lock()
	defer fake.scanMutex.Unlock()
	fake.ScanStub = stub
}

func (fake *FakeCommandWrapper) ScanArgsForCall(i int) string {
	fake.scanMutex.RLock()
	defer fake.scanMutex.RUnlock()
	argsForCall := fake.scanArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCommandWrapper) ScanReturns(result1 *trivy.ScanOutput, result2 error) {
	fake.scanMutex.Lock()
	defer fake.scanMutex.Unlock()
	fake.ScanStub = nil
	fake.scanReturns = struct {
		result1 *trivy.ScanOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCommandWrapper) ScanReturnsOnCall(i int, result1 *trivy.ScanOutput, result2 error) {
	fake.scanMutex.Lock()
	defer fake.scanMutex.Unlock()
	fake.ScanStub = nil
	if fake.scanReturnsOnCall == nil {
		fake.scanReturnsOnCall = make(map[int]struct {
			result1 *trivy.ScanOutput
			result2 error
		})
	}
	fake.scanReturnsOnCall[i] = struct {
		result1 *trivy.ScanOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCommandWrapper) Version() (*trivy.Version, error) {
	fake.versionMutex.Lock()
	ret, specificReturn := fake.versionReturnsOnCall[len(fake.versionArgsForCall)]
	fake.versionArgsForCall = append(fake.versionArgsForCall, struct {
	}{})
	stub := fake.VersionStub
	fakeReturns := fake.versionReturns
	fake.recordInvocation("Version", []interface{}{})
	fake.versionMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCommandWrapper) VersionCallCount() int {
	fake.versionMutex.RLock()
	defer fake.versionMutex.RUnlock()
	return len(fake.versionArgsForCall)
}

func (fake *FakeCommandWrapper) VersionCalls(stub func() (*trivy.Version, error)) {
	fake.versionMutex.Lock()
	defer fake.versionMutex.Unlock()
	fake.VersionStub = stub
}

func (fake *FakeCommandWrapper) VersionReturns(result1 *trivy.Version, result2 error) {
	fake.versionMutex.Lock()
	defer fake.versionMutex.Unlock()
	fake.VersionStub = nil
	fake.versionReturns = struct {
		result1 *trivy.Version
		result2 error
	}{result1, result2}
}

func (fake *FakeCommandWrapper) VersionReturnsOnCall(i int, result1 *trivy.Version, result2 error) {
	fake.versionMutex.Lock()
	defer fake.versionMutex.Unlock()
	fake.VersionStub = nil
	if fake.versionReturnsOnCall == nil {
		fake.versionReturnsOnCall = make(map[int]struct {
			result1 *trivy.Version
			result2 error
		})
	}
	fake.versionReturnsOnCall[i] = struct {
		result1 *trivy.Version
		result2 error
	}{result1, result2}
}

func (fake *FakeCommandWrapper) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.scanMutex.RLock()
	defer fake.scanMutex.RUnlock()
	fake.versionMutex.RLock()
	defer fake.versionMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCommandWrapper) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ trivy.CommandWrapper = new(FakeCommandWrapper)
