// Code generated by counterfeiter. DO NOT EDIT.
package scannerfakes

import (
	"sync"

	"github.com/rode/collector-image-scanner/scanner"
)

type FakeImageScanner struct {
	ImageScanStub        func(string)
	imageScanMutex       sync.RWMutex
	imageScanArgsForCall []struct {
		arg1 string
	}
	InitStub        func() error
	initMutex       sync.RWMutex
	initArgsForCall []struct {
	}
	initReturns struct {
		result1 error
	}
	initReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeImageScanner) ImageScan(arg1 string) {
	fake.imageScanMutex.Lock()
	fake.imageScanArgsForCall = append(fake.imageScanArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.ImageScanStub
	fake.recordInvocation("ImageScan", []interface{}{arg1})
	fake.imageScanMutex.Unlock()
	if stub != nil {
		fake.ImageScanStub(arg1)
	}
}

func (fake *FakeImageScanner) ImageScanCallCount() int {
	fake.imageScanMutex.RLock()
	defer fake.imageScanMutex.RUnlock()
	return len(fake.imageScanArgsForCall)
}

func (fake *FakeImageScanner) ImageScanCalls(stub func(string)) {
	fake.imageScanMutex.Lock()
	defer fake.imageScanMutex.Unlock()
	fake.ImageScanStub = stub
}

func (fake *FakeImageScanner) ImageScanArgsForCall(i int) string {
	fake.imageScanMutex.RLock()
	defer fake.imageScanMutex.RUnlock()
	argsForCall := fake.imageScanArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeImageScanner) Init() error {
	fake.initMutex.Lock()
	ret, specificReturn := fake.initReturnsOnCall[len(fake.initArgsForCall)]
	fake.initArgsForCall = append(fake.initArgsForCall, struct {
	}{})
	stub := fake.InitStub
	fakeReturns := fake.initReturns
	fake.recordInvocation("Init", []interface{}{})
	fake.initMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeImageScanner) InitCallCount() int {
	fake.initMutex.RLock()
	defer fake.initMutex.RUnlock()
	return len(fake.initArgsForCall)
}

func (fake *FakeImageScanner) InitCalls(stub func() error) {
	fake.initMutex.Lock()
	defer fake.initMutex.Unlock()
	fake.InitStub = stub
}

func (fake *FakeImageScanner) InitReturns(result1 error) {
	fake.initMutex.Lock()
	defer fake.initMutex.Unlock()
	fake.InitStub = nil
	fake.initReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeImageScanner) InitReturnsOnCall(i int, result1 error) {
	fake.initMutex.Lock()
	defer fake.initMutex.Unlock()
	fake.InitStub = nil
	if fake.initReturnsOnCall == nil {
		fake.initReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.initReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeImageScanner) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.imageScanMutex.RLock()
	defer fake.imageScanMutex.RUnlock()
	fake.initMutex.RLock()
	defer fake.initMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeImageScanner) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ scanner.ImageScanner = new(FakeImageScanner)
